import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

@SpringBootApplication
public class StudentDetailsApplication {

    public static void main(String[] args) {
        SpringApplication.run(StudentDetailsApplication.class, args);
    }

    @RestController
    public class StudentController {

        private static final String FILE_PATH = "student_data.csv";

        @GetMapping("/api/students")
        public ResponseEntity<StudentResponse> getStudents(
                @RequestParam(defaultValue = "1") int page,
                @RequestParam(defaultValue = "10") int pageSize
        ) {
            try {
                List<Student> allStudents = loadStudentDetailsFromFile();
                int totalStudents = allStudents.size();

                int startIndex = (page - 1) * pageSize;
                int endIndex = Math.min(startIndex + pageSize, totalStudents);

                List<Student> paginatedStudents = allStudents.subList(startIndex, endIndex);

                StudentResponse response = new StudentResponse(paginatedStudents, totalStudents, page, pageSize);
                return ResponseEntity.ok(response);
            } catch (IOException e) {
                e.printStackTrace();
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(new StudentResponse("Failed to load student details."));
            }
        }

        private List<Student> loadStudentDetailsFromFile() throws IOException {
            List<String> lines = Files.readAllLines(Paths.get(FILE_PATH));

            // Implement parsing logic to convert lines into Student objects
            // You can use a CSV parsing library or split the lines manually

            // Return the list of Student objects
            return List.of();
        }
    }

    public class Student {
        // Define the properties of a student (id, name, total marks, etc.)
        // Add appropriate getters and setters
    }

    public class StudentResponse {
        private List<Student> students;
        private int totalStudents;
        private int currentPage;
        private int totalPages;
        private String error;

        // Constructors, getters, and setters
    }
}
